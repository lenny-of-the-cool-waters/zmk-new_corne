#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&mt LC(LA(DEL)) ESCAPE  &kp Q  &kp W  &kp E     &kp R       &kp T                                               &mmv MOVE_UP                     &kp Y                 &kp U      &kp I                   &kp O    &kp P     &kp BSPC
&mt LEFT_ALT TAB        &kp A  &kp S  &kp D     &kp F       &kp G                               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H                 &kp J      &kp K                   &kp L    &kp SEMI  &mt RIGHT_ALT SQT
&kp LCTRL               &kp Z  &kp X  &kp C     &kp V       &kp B                 &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N                 &kp M      &kp COMMA               &kp DOT  &kp FSLH  &kp DEL
                                      &kp LGUI  &lt 1 HOME  &mt LEFT_SHIFT ENTER                                                                 &mt LEFT_SHIFT SPACE  &lt 2 END  &mt RIGHT_ALT CAPSLOCK
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&kp GRAVE        &kp N1         &kp N2        &kp N3        &kp N4        &kp N5                                        &kp UP_ARROW             &kp N6                 &kp N7     &kp N8          &kp N9     &kp N0         &kp BSPC
&kp PRINTSCREEN  &kp LA(F4)     &none         &none         &kp MINUS     &kp LEFT_PARENTHESIS                &kp LEFT  &mkp RCLK     &kp RIGHT  &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp UP          &none      &none          &kp PG_UP
&kp LC(LA(DEL))  &kp LC(LS(Y))  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp LEFT_BRACKET      &kp C_MUTE              &kp DOWN                 &kp RIGHT_BRACKET      &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &kp BACKSLASH  &kp PG_DN
                                              &trans        &trans        &trans                                                                 &trans                 &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DEC>;
        };

        raise_layer {
            display-name = "FN_NUMPAD";
            bindings = <
&rgb_ug RGB_TOG  &kp EXCL      &kp F1  &kp F2   &kp F3             &kp F4                               &msc SCRL_UP                     &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &kp BSPC
&rgb_ug RGB_EFF  &bt BT_CLR    &kp F5  &kp F6   &kp F7             &kp F8               &msc SCRL_LEFT  &mkp RCLK       &mmv MOVE_RIGHT  &kp COMMA     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &kp LEFT_ALT
&trans           &out OUT_USB  &kp F9  &kp F10  &kp F11            &kp F12    &trans                    &msc SCRL_DOWN                   &kp PERIOD    &kp N7        &kp N8        &kp N9        &kp EQUAL  &kp DELETE
                                       &trans   &lt 3 RIGHT_SHIFT  &kp SPACE                                                             &kp RET       &trans        &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        RGB {
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &none  &none  &none                  &none          &none  &none  &none  &none  &bl BL_CYCLE  &bl BL_TOG
&rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &none  &none  &none           &none  &trans  &none  &none  &none  &none  &none  &none         &bl BL_INC
&rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &none  &none  &none  &none           &none          &none  &none  &none  &none  &none         &bl BL_DEC
                                                   &none  &none  &none                                 &none  &none  &none
            >;
        };
    };
};
